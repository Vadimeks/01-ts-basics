import{a as m}from"./assets/vendor-DDD7fsZd.js";(function(){const s=document.createElement("link").relList;if(s&&s.supports&&s.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))c(o);new MutationObserver(o=>{for(const t of o)if(t.type==="childList")for(const l of t.addedNodes)l.tagName==="LINK"&&l.rel==="modulepreload"&&c(l)}).observe(document,{childList:!0,subtree:!0});function r(o){const t={};return o.integrity&&(t.integrity=o.integrity),o.referrerPolicy&&(t.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?t.credentials="include":o.crossOrigin==="anonymous"?t.credentials="omit":t.credentials="same-origin",t}function c(o){if(o.ep)return;o.ep=!0;const t=r(o);fetch(o.href,t)}})();const y="Alice",$=30,h=!0;console.log(`Name: ${y}`);console.log(`Age: ${$}`);console.log(`IsOnline: ${h}`);const b={id:1,title:"Tablet",description:"Compact and fast"};console.log(`Product: ${JSON.stringify(b)}`);const O=["alice","bob","charlie"],F=[4.5,3.8,5],P=[{id:1,title:"Phone"},{id:2,title:"Laptop"}];console.log(`Usernames: ${JSON.stringify(O)}`);console.log(`Ratings: ${JSON.stringify(F)}`);console.log(`Products: ${JSON.stringify(P)}`);function d(e,s,r){console.log("Name:",e),console.log("Age:",s),r&&console.log("Email:",r)}d("Alice",30);d("Bob",25,"bob@mail.com");function i(e){e==="loading"?console.log("Loading..."):e==="success"?console.log("Success!"):e==="error"&&console.log("Something went wrong")}i("loading");i("success");i("error");function n(e){if(e.length!==0)return e[0]}const g=n([1,2,3]);console.log(`First number: ${g}, Type: ${typeof g}`);const u=n(["a","b","c"]);console.log(`First string: ${u}, Type: ${typeof u}`);const f=n([!0,!1,!0]);console.log(`First boolean: ${f}, Type: ${typeof f}`);const T=[1,"two",!0],a=n(T);console.log(`First mixed: ${a}, Type: ${typeof a}`);const p=n([]);console.log(`First el of empty arr: ${p}, Type: ${typeof p}`);function N(){return new Promise(e=>{setTimeout(()=>{e("Hello from TS")},1e3)})}N().then(e=>{console.log(e),console.log(`Type of result: ${typeof e}`)});async function S(){return(await m.get("https://jsonplaceholder.typicode.com/posts")).data}S().then(e=>{e.length>0?(console.log(`First post (title): ${e[0].title}`),console.log(`First post (body): ${e[0].title}`),console.log("First post type:",e[0])):console.log("Posts not found")}).catch(e=>{console.error("Error during posts receiving:",e)});
//# sourceMappingURL=index.js.map
