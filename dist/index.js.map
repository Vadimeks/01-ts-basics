{"version":3,"file":"index.js","sources":["../src/task-1.ts","../src/task-2.ts","../src/task-3.ts","../src/task-4.ts","../src/task-5.ts","../src/task-6.ts","../src/task-7.ts","../src/task-8.ts"],"sourcesContent":["//  Задача 1. Типізація скалярних значень (файл task-1.ts)\r\n// У цьому фрагменті коду оголошені три змінні з різними типами значень: текст, число і булеве значення.\r\n\r\n// const name = \"Alice\";\r\n// const age = 30;\r\n// const isOnline = true;\r\n\r\n// console.log(`Name: ${name}`);\r\n// console.log(`Age: ${age}`);\r\n// console.log(`Online: ${isOnline}`);\r\n\r\n// Завдання:\r\n\r\n// Додай до кожної змінної явну типізацію.\r\n// Переконайся, що TypeScript правильно визначає тип, і не видає помилку.\r\n// Залиш назви змінних і їх значення без змін.\r\nexport {};\r\nconst name: string = 'Alice';\r\nconst age: number = 30;\r\nconst isOnline: boolean = true;\r\n\r\nconsole.log(`Name: ${name}`);\r\nconsole.log(`Age: ${age}`);\r\nconsole.log(`IsOnline: ${isOnline}`);\r\n","// Задача 2. Інтерфейси (файл task-2.ts)\r\n\r\n// У цьому фрагменті коду є об'єкт product, який описує товар.\r\n\r\n// const product = {\r\n//   id: 1,\r\n//   title: \"Tablet\",\r\n//   description: \"Compact and fast\",\r\n// };\r\n\r\n// console.log(`Product: ${JSON.stringify(product)}`);\r\n\r\n// Завдання:\r\n\r\n// Створи інтерфейс Product, який описує структуру цього об’єкта.\r\n// Зроби поле id тільки для читання – воно не повинно змінюватись після створення об’єкта.\r\n// Зроби поле description необов’язковим – не всі товари можуть його мати.\r\n// Типізуй змінну product за допомогою створеного інтерфейсу.\r\n// Залиш властивості обʼєкта product і їх значення без змін.\r\nexport {};\r\ninterface Product {\r\n  readonly id: number;\r\n  title: string;\r\n  description?: string;\r\n}\r\n\r\nconst product: Product = {\r\n  id: 1,\r\n  title: 'Tablet',\r\n  description: 'Compact and fast',\r\n};\r\n\r\nconsole.log(`Product: ${JSON.stringify(product)}`);\r\n","// Задача 3. Типізація масивів (файл task-3.ts)\r\n\r\n// У цьому коді є три масиви з різними типами даних: рядки, числа та об’єкти.\r\n\r\n// const usernames = [\"alice\", \"bob\", \"charlie\"];\r\n\r\n// const ratings = [4.5, 3.8, 5];\r\n\r\n// const products = [\r\n//   { id: 1, title: \"Phone\" },\r\n//   { id: 2, title: \"Laptop\" },\r\n// ];\r\n\r\n// console.log(`Usernames: ${JSON.stringify(usernames)}`);\r\n// console.log(`Ratings: ${JSON.stringify(ratings)}`);\r\n// console.log(`Products: ${JSON.stringify(products)}`);\r\n\r\n// Завдання:\r\n\r\n// Додай тип для масиву рядків usernames, використовуючи синтаксис [].\r\n// Додай тип для масиву чисел ratings, використовуючи синтаксис [].\r\n// Для масиву products:\r\n// Створи окремий інтерфейс Product для елементів масиву.\r\n// Типізуй сам масив за допомогою цього інтерфейсу.\r\n// 4. Залиш елементи масиву products без змін.\r\nexport {};\r\nconst usernames: string[] = ['alice', 'bob', 'charlie'];\r\nconst ratings: number[] = [4.5, 3.8, 5];\r\ninterface Product {\r\n  id: number;\r\n  title: string;\r\n}\r\nconst products: Product[] = [\r\n  { id: 1, title: 'Phone' },\r\n  { id: 2, title: 'Laptop' },\r\n];\r\nconsole.log(`Usernames: ${JSON.stringify(usernames)}`);\r\nconsole.log(`Ratings: ${JSON.stringify(ratings)}`);\r\nconsole.log(`Products: ${JSON.stringify(products)}`);\r\n","// Задача 4. Функції (файл task-4.ts)\r\n\r\n// Функція printUserInfo виводить інформацію про користувача, включаючи ім’я, вік і (опціонально) email.\r\n\r\n// function printUserInfo(name, age, email) {\r\n//   console.log(\"Name:\", name);\r\n//   console.log(\"Age:\", age);\r\n//   if (email) {\r\n//     console.log(\"Email:\", email);\r\n//   }\r\n// }\r\n\r\n// printUserInfo(\"Alice\", 30);\r\n// printUserInfo(\"Bob\", 25, \"bob@mail.com\");\r\n\r\n// Завдання:\r\n\r\n// Додай явну типізацію до параметрів функції: name, age та email.\r\n// Зроби параметр email опціональним – щоб функція могла працювати як з ним, так і без нього.\r\n// Типізуй повернення функції, зауваж що вона нічого явно не повертає.\r\n// Залиш реалізацію функції без змін.\r\nexport {};\r\nfunction printUserInfo(name: string, age: number, email?: string): void {\r\n  console.log('Name:', name);\r\n  console.log('Age:', age);\r\n  if (email) {\r\n    console.log('Email:', email);\r\n  }\r\n}\r\nprintUserInfo('Alice', 30);\r\nprintUserInfo('Bob', 25, 'bob@mail.com');\r\n","// Задача 5. Union Type (файл task-5.ts)\r\n\r\n// Функція logStatus приймає рядок status і виводить відповідне повідомлення.\r\n\r\n// function logStatus(status) {\r\n//   if (status === \"loading\") {\r\n//     console.log(\"Loading...\");\r\n//   } else if (status === \"success\") {\r\n//     console.log(\"Success!\");\r\n//   } else if (status === \"error\") {\r\n//     console.log(\"Something went wrong\");\r\n//   }\r\n// }\r\n\r\n// logStatus(\"loading\");\r\n\r\n// Завдання:\r\n\r\n// Типізуй параметр status так, щоб дозволити тільки три конкретні рядкові значення: \"loading\", \"success\", \"error\"\r\n// Переконайся, що TypeScript не дозволяє передати будь-яке інше значення.\r\n// Типізуй повернення функції, зауваж що вона нічого явно не повертає.\r\n// Залиш реалізацію функції без змін.\r\nexport {};\r\nfunction logStatus(status: 'loading' | 'success' | 'error'): void {\r\n  if (status === 'loading') {\r\n    console.log('Loading...');\r\n  } else if (status === 'success') {\r\n    console.log('Success!');\r\n  } else if (status === 'error') {\r\n    console.log('Something went wrong');\r\n  }\r\n}\r\nlogStatus('loading');\r\nlogStatus('success');\r\nlogStatus('error');\r\n","// Задача 6. Узагальнені типи (файл task-6.ts)\r\n\r\n// Функція getFirstElement приймає масив і повертає його перший елемент.\r\n\r\n// function getFirstElement(arr) {\r\n//   return arr[0];\r\n// }\r\n\r\n// getFirstElement([1, 2, 3]);\r\n// getFirstElement([\"a\", \"b\", \"c\"]);\r\n// getFirstElement([true, false, true]);\r\n\r\n// Завдання:\r\n\r\n// Зроби функцію узагальненою, використовуючи тип T, щоб вона працювала з масивами будь-якого типу.\r\n// Додай явну типізацію дженериків у виклики функцій.\r\n// Переконайся, що тип елемента, який повертається, точно відповідає типу елементів у масиві.\r\n// Перевір, що TypeScript не дозволяє передати масив змішаних типів без відповідного типу.\r\nexport {};\r\nfunction getFirstElement<T>(arr: T[]): T | undefined {\r\n  if (arr.length === 0) {\r\n    return undefined;\r\n  }\r\n  return arr[0];\r\n}\r\nconst numResult = getFirstElement<number>([1, 2, 3]);\r\nconsole.log(`First number: ${numResult}, Type: ${typeof numResult}`);\r\nconst stringResult = getFirstElement<string>(['a', 'b', 'c']);\r\nconsole.log(`First string: ${stringResult}, Type: ${typeof stringResult}`);\r\nconst booleanResult = getFirstElement<boolean>([true, false, true]);\r\nconsole.log(`First boolean: ${booleanResult}, Type: ${typeof booleanResult}`);\r\nconst mixedTypeArray = [1, 'two', true];\r\nconst mixedResult = getFirstElement<number | string | boolean>(mixedTypeArray);\r\nconsole.log(`First mixed: ${mixedResult}, Type: ${typeof mixedResult}`);\r\nconst emptyResult = getFirstElement<string>([]);\r\nconsole.log(\r\n  `First el of empty arr: ${emptyResult}, Type: ${typeof emptyResult}`\r\n);\r\n","// Задача 7. Типізація Promise (файл task-7.ts)\r\n\r\n// Функція getMessage повертає проміс, який через затримку повертає рядок.\r\n\r\n// function getMessage() {\r\n//   return new Promise((resolve) => {\r\n//     setTimeout(() => {\r\n//       resolve(\"Hello from TS\");\r\n//     }, 1000);\r\n//   });\r\n// }\r\n\r\n// getMessage().then(result => console.log(result));\r\n// Завдання:\r\n\r\n// Додай до функції явну типізацію, яка вказує, що вона повертає проміс.\r\n// Переконайся, що значення, з яким виконається проміс, – це рядок (string).\r\nexport {};\r\nfunction getMessage(): Promise<string> {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve('Hello from TS');\r\n    }, 1000);\r\n  });\r\n}\r\ngetMessage().then(result => {\r\n  console.log(result);\r\n  console.log(`Type of result: ${typeof result}`);\r\n});\r\n","// Завдання 8. HTTP-запити (файл task-8.ts)\r\n\r\n// Функція fetchPosts робить GET-запит до API та повертає список постів.\r\n\r\n// import axios from \"axios\";\r\n\r\n// async function fetchPosts() {\r\n//   const response = await axios.get(\r\n//     '<https://jsonplaceholder.typicode.com/posts>'\r\n//   );\r\n//   return response.data;\r\n// }\r\n\r\n// fetchPosts().then((posts) => {\r\n//   console.log(posts[0].title);\r\n// });\r\n\r\n// Завдання:\r\n\r\n// Інсталюй бібліотеку axios командою npm i axios\r\n// Створи інтерфейс Post, який описує об'єкт поста з такими полями:\r\n// id: число\r\n// title: рядок\r\n// body: рядок\r\n// 3. Типізуй axios.get, щоб вказати, що API повертає масив постів.\r\nexport {};\r\nimport axios from 'axios';\r\ninterface Post {\r\n  id: number;\r\n  title: string;\r\n  body: string;\r\n}\r\nasync function fetchPosts(): Promise<Post[]> {\r\n  const response = await axios.get<Post[]>(\r\n    'https://jsonplaceholder.typicode.com/posts'\r\n  );\r\n  return response.data;\r\n}\r\nfetchPosts()\r\n  .then(posts => {\r\n    if (posts.length > 0) {\r\n      console.log(`First post (title): ${posts[0].title}`);\r\n      console.log(`First post (body): ${posts[0].title}`);\r\n      console.log(`First post type:`, posts[0]);\r\n    } else {\r\n      console.log('Posts not found');\r\n    }\r\n  })\r\n  .catch(error => {\r\n    console.error('Error during posts receiving:', error);\r\n  });\r\n"],"names":["name","age","isOnline","product","usernames","ratings","products","printUserInfo","email","logStatus","status","getFirstElement","arr","numResult","stringResult","booleanResult","mixedTypeArray","mixedResult","emptyResult","getMessage","resolve","result","fetchPosts","axios","posts","error"],"mappings":"svBAiBA,MAAMA,EAAe,QACfC,EAAc,GACdC,EAAoB,GAE1B,QAAQ,IAAI,SAASF,CAAI,EAAE,EAC3B,QAAQ,IAAI,QAAQC,CAAG,EAAE,EACzB,QAAQ,IAAI,aAAaC,CAAQ,EAAE,ECGnC,MAAMC,EAAmB,CACvB,GAAI,EACJ,MAAO,SACP,YAAa,kBACf,EAEA,QAAQ,IAAI,YAAY,KAAK,UAAUA,CAAO,CAAC,EAAE,ECNjD,MAAMC,EAAsB,CAAC,QAAS,MAAO,SAAS,EAChDC,EAAoB,CAAC,IAAK,IAAK,CAAC,EAKhCC,EAAsB,CAC1B,CAAE,GAAI,EAAG,MAAO,OAAQ,EACxB,CAAE,GAAI,EAAG,MAAO,QAAS,CAC3B,EACA,QAAQ,IAAI,cAAc,KAAK,UAAUF,CAAS,CAAC,EAAE,EACrD,QAAQ,IAAI,YAAY,KAAK,UAAUC,CAAO,CAAC,EAAE,EACjD,QAAQ,IAAI,aAAa,KAAK,UAAUC,CAAQ,CAAC,EAAE,EChBnD,SAASC,EAAcP,EAAcC,EAAaO,EAAsB,CAC9D,QAAA,IAAI,QAASR,CAAI,EACjB,QAAA,IAAI,OAAQC,CAAG,EACnBO,GACM,QAAA,IAAI,SAAUA,CAAK,CAE/B,CACAD,EAAc,QAAS,EAAE,EACzBA,EAAc,MAAO,GAAI,cAAc,ECPvC,SAASE,EAAUC,EAA+C,CAC5DA,IAAW,UACb,QAAQ,IAAI,YAAY,EACfA,IAAW,UACpB,QAAQ,IAAI,UAAU,EACbA,IAAW,SACpB,QAAQ,IAAI,sBAAsB,CAEtC,CACAD,EAAU,SAAS,EACnBA,EAAU,SAAS,EACnBA,EAAU,OAAO,ECfjB,SAASE,EAAmBC,EAAyB,CAC/C,GAAAA,EAAI,SAAW,EAGnB,OAAOA,EAAI,CAAC,CACd,CACA,MAAMC,EAAYF,EAAwB,CAAC,EAAG,EAAG,CAAC,CAAC,EACnD,QAAQ,IAAI,iBAAiBE,CAAS,WAAW,OAAOA,CAAS,EAAE,EACnE,MAAMC,EAAeH,EAAwB,CAAC,IAAK,IAAK,GAAG,CAAC,EAC5D,QAAQ,IAAI,iBAAiBG,CAAY,WAAW,OAAOA,CAAY,EAAE,EACzE,MAAMC,EAAgBJ,EAAyB,CAAC,GAAM,GAAO,EAAI,CAAC,EAClE,QAAQ,IAAI,kBAAkBI,CAAa,WAAW,OAAOA,CAAa,EAAE,EAC5E,MAAMC,EAAiB,CAAC,EAAG,MAAO,EAAI,EAChCC,EAAcN,EAA2CK,CAAc,EAC7E,QAAQ,IAAI,gBAAgBC,CAAW,WAAW,OAAOA,CAAW,EAAE,EACtE,MAAMC,EAAcP,EAAwB,EAAE,EAC9C,QAAQ,IACN,0BAA0BO,CAAW,WAAW,OAAOA,CAAW,EACpE,ECnBA,SAASC,GAA8B,CAC9B,OAAA,IAAI,QAAmBC,GAAA,CAC5B,WAAW,IAAM,CACfA,EAAQ,eAAe,GACtB,GAAI,CAAA,CACR,CACH,CACAD,IAAa,KAAeE,GAAA,CAC1B,QAAQ,IAAIA,CAAM,EAClB,QAAQ,IAAI,mBAAmB,OAAOA,CAAM,EAAE,CAChD,CAAC,ECID,eAAeC,GAA8B,CAI3C,OAHiB,MAAMC,EAAM,IAC3B,4CACF,GACgB,IAClB,CACAD,IACG,KAAcE,GAAA,CACTA,EAAM,OAAS,GACjB,QAAQ,IAAI,uBAAuBA,EAAM,CAAC,EAAE,KAAK,EAAE,EACnD,QAAQ,IAAI,sBAAsBA,EAAM,CAAC,EAAE,KAAK,EAAE,EAClD,QAAQ,IAAI,mBAAoBA,EAAM,CAAC,CAAC,GAExC,QAAQ,IAAI,iBAAiB,CAEjC,CAAC,EACA,MAAeC,GAAA,CACN,QAAA,MAAM,gCAAiCA,CAAK,CACtD,CAAC"}