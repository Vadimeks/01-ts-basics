{"version":3,"file":"index.js","sources":["../src/js/apiService.js","../src/js/hero.js","../src/js/modal-artists.js","../src/js/artists.js"],"sourcesContent":["// apiService.js\nimport axios from 'axios';\n\nconst API_BASE_URL = 'https://sound-wave.b.goit.study/api';\n\n/**\n * Атрымлівае спіс жанраў.\n * @returns {Promise<Array>} - Масіў аб'ектаў жанраў.\n */\nexport async function fetchGenres() {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/genres`);\n    return response.data;\n  } catch (error) {\n    console.error('Памылка пры загрузцы спісу жанраў:', error);\n    throw error;\n  }\n}\n\n/**\n * Атрымлівае спіс артыстаў з пагінацыяй.\n * @param {number} limit - Колькасць артыстаў на старонку.\n * @param {number} page - Нумар старонкі.\n * @returns {Promise<Object>} - Аб'ект з масівам артыстаў, агульнай колькасцю і інфармацыяй аб пагінацыі.\n */\nexport async function fetchArtists(limit = 10, page = 1) {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/artists`, {\n      params: { limit, page },\n    });\n    return response.data; // { artists: [], totalArtists: number, page: string, limit: string }\n  } catch (error) {\n    console.error('Памылка пры загрузцы спісу артыстаў:', error);\n    throw error;\n  }\n}\n\n/**\n * Атрымлівае падрабязную інфармацыю пра артыста па ID.\n * Гэты эндпоінт, як бачна з вашых дадзеных, уключае 'albumsList'.\n * @param {string} artistId - ID артыста.\n * @returns {Promise<Object>} - Аб'ект з падрабязнай інфармацыяй пра артыста.\n */\nexport async function fetchArtistDetailsWithAlbums(artistId) {\n  try {\n    const response = await axios.get(\n      `${API_BASE_URL}/artists/${artistId}/albums`\n    );\n    return response.data; // Уключае albumsList\n  } catch (error) {\n    console.error(\n      `Памылка пры загрузцы дэталяў артыста з альбомамі (ID: ${artistId}):`,\n      error\n    );\n    throw error;\n  }\n}\n\n/**\n * Атрымлівае падрабязную інфармацыю пра артыста па ID.\n * Гэты эндпоінт, як бачна з вашых дадзеных, уключае 'tracksList'.\n * @param {string} artistId - ID артыста.\n * @returns {Promise<Object>} - Аб'ект з падрабязнай інфармацыяй пра артыста.\n */\nexport async function fetchArtistDetailsWithTracks(artistId) {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/artists/${artistId}`); // Эндпоінт /artists/{id} вяртае tracksList\n    return response.data; // Уключае tracksList\n  } catch (error) {\n    console.error(\n      `Памылка пры загрузцы дэталяў артыста з трэкамі (ID: ${artistId}):`,\n      error\n    );\n    throw error;\n  }\n}\n\n/**\n * Адпраўляе новы водгук.\n * @param {Object} feedbackData - Аб'ект з дадзенымі водгуку.\n * @param {string} feedbackData.name - Імя карыстальніка.\n * @param {number} feedbackData.rating - Рэйтынг (напрыклад, ад 1 да 5).\n * @param {string} feedbackData.descr - Апісанне/каментар.\n * @returns {Promise<Object>} - Аб'ект з паведамленнем аб апрацоўцы.\n */\nexport async function submitFeedback(feedbackData) {\n  try {\n    const response = await axios.post(\n      `${API_BASE_URL}/feedbacks`,\n      feedbackData\n    );\n    return response.data; // { message: \"Feedback is processed\" }\n  } catch (error) {\n    console.error('Памылка пры адпраўцы водгуку:', error);\n    throw error;\n  }\n}\n\n/**\n * Атрымлівае спіс водгукаў з пагінацыяй.\n * @param {number} limit - Колькасць водгукаў на старонку.\n * @param {number} page - Нумар старонкі.\n * @returns {Promise<Object>} - Аб'ект з масівам водгукаў, агульнай колькасцю і інфармацыяй аб пагінацыі.\n */\nexport async function fetchFeedbacks(limit = 10, page = 1) {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/feedbacks`, {\n      params: { limit, page },\n    });\n    return response.data; // { data: [], total: number, page: string, limit: string }\n  } catch (error) {\n    console.error('Памылка пры загрузцы спісу водгукаў:', error);\n    throw error;\n  }\n}\n\n// Функцыі для рэгістрацыі і ўваходу (пакуль без рэалізацыі, бо не было падрабязных прыкладаў адказу)\n// Іх варта дадаць, калі будзе патрэба і вы дасце больш інфармацыі пра іх выкарыстанне і апрацоўку apiKey.\n\n/**\n * Рэгістрацыя карыстальніка.\n * @param {Object} userData - Дадзеныя для рэгістрацыі.\n * @param {string} userData.email - Адрас электроннай пошты.\n * @param {string} userData.password - Пароль.\n * @returns {Promise<Object>} - Аб'ект з apiKey.\n */\nexport async function registerUser(userData) {\n  try {\n    // Рэалізацыя запыту для рэгістрацыі.\n    // Меркаваны эндпоінт і структура:\n    const response = await axios.post(`${API_BASE_URL}/register`, userData); // Мяркуемы эндпоінт\n    return response.data; // { apiKey: \"...\" }\n  } catch (error) {\n    console.error('Памылка пры рэгістрацыі карыстальніка:', error);\n    throw error;\n  }\n}\n\n/**\n * Уваход карыстальніка.\n * @param {Object} credentials - Уліковыя дадзеныя карыстальніка.\n * @param {string} credentials.email - Адрас электроннай пошты.\n * @param {string} credentials.password - Пароль.\n * @returns {Promise<Object>} - Аб'ект з apiKey.\n */\nexport async function loginUser(credentials) {\n  try {\n    // Рэалізацыя запыту для ўваходу.\n    // Меркаваны эндпоінт і структура:\n    const response = await axios.post(`${API_BASE_URL}/login`, credentials); // Мяркуемы эндпоінт\n    return response.data; // { apiKey: \"...\" }\n  } catch (error) {\n    console.error('Памылка пры ўваходзе карыстальніка:', error);\n    throw error;\n  }\n}\n","// js/hero.js\nimport { fetchArtists } from './apiService.js'; // Імпартуем нашу функцыю з apiService.js\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  // === ЛОГІКА ДЛЯ ЗАГРУЗКІ МАЛЮНКАЎ АРТЫСТАЎ У HERO-СЕКЦЫЮ ===\n  const heroColumnOne = document.querySelector('.hero-column-one');\n  const heroColumnTwo = document.querySelector('.hero-column-two');\n\n  async function displayHeroArtists() {\n    let artists = [];\n    try {\n      // Запытваем першых 6 артыстаў (limit=6, page=1)\n      const response = await fetchArtists(6, 1);\n      artists = response.artists || []; // Атрымліваем масіў артыстаў\n    } catch (error) {\n      console.error('Памылка пры загрузцы артыстаў для Hero-секцыі:', error);\n      // Калі памылка, застанецца пусты масіў, і папярэджанне выведзецца ніжэй\n    }\n\n    if (artists.length === 0) {\n      console.warn(\n        'Няма дадзеных пра артыстаў для адлюстравання ў Hero-секцыі. Праверце API ці даступнасць дадзеных.'\n      );\n      return;\n    }\n\n    // Дзелім атрыманых артыстаў на дзве калонкі\n    const columnOneArtists = artists.slice(0, 3);\n    const columnTwoArtists = artists.slice(3, 6);\n\n    function populateColumn(columnElement, artistData) {\n      const imgElements = columnElement.querySelectorAll('.hero-artist-img');\n      artistData.forEach((artist, index) => {\n        if (imgElements[index]) {\n          imgElements[index].src =\n            artist.strArtistThumb ||\n            'https://via.placeholder.com/150x150?text=No+Image'; // Запасны малюнак, калі фота няма\n          imgElements[index].alt = artist.strArtist || 'Artist photo';\n        }\n      });\n    }\n\n    if (heroColumnOne) {\n      populateColumn(heroColumnOne, columnOneArtists);\n    }\n    if (heroColumnTwo) {\n      populateColumn(heroColumnTwo, columnTwoArtists);\n    }\n  }\n\n  // Выклікаем функцыю для адлюстравання малюнкаў пры загрузцы DOM\n  displayHeroArtists();\n\n  // --- ЛОГІКА ДЛЯ КНОПКІ \"EXPLORE ARTISTS\" ---\n  const exploreBtn = document.querySelector('.explore-btn');\n  const artistsSection = document.getElementById('artists-section'); // Атрымліваем секцыю артыстаў\n\n  if (exploreBtn && artistsSection) {\n    exploreBtn.addEventListener('click', event => {\n      // event.preventDefault(); // Залежыць ад таго, дзе кнопка размешчана\n      artistsSection.scrollIntoView({\n        behavior: 'smooth', // Плаўная пракрутка\n      });\n    });\n  } else if (!artistsSection) {\n    console.warn(\n      `Секцыя з ID \"artists-section\" не знойдзена для кнопкі Explore.`\n    );\n  }\n});\n","// js/modal-artists.js\nimport {\n  fetchArtistDetailsWithTracks,\n  fetchArtistDetailsWithAlbums,\n} from './apiService.js'; // Імпартуем функцыі API\n\n// ===============================================\n// 1. Кэшаванне DOM-элементаў\n// ===============================================\nconst artistModal = document.getElementById('artistModal');\nconst closeModalButton = artistModal\n  ? artistModal.querySelector('.close-modal')\n  : null;\nconst modalLoader = document.getElementById('modalLoader');\nconst modalTitle = artistModal\n  ? artistModal.querySelector('.modal-title')\n  : null;\nconst heroArtistImg = artistModal\n  ? artistModal.querySelector('.hero-artist-img')\n  : null;\n\nconst artistInfoList = artistModal\n  ? artistModal.querySelector('.artist-info-list')\n  : null;\nconst artistBioParagraph = artistModal\n  ? artistModal.querySelector('.artist-info-bio-text')\n  : null;\nconst genresList = artistModal\n  ? artistModal.querySelector('.genres-list')\n  : null;\nconst artistAlbumsListContainer = artistModal\n  ? artistModal.querySelector('.artist-albums-list')\n  : null;\n\n// ===============================================\n// 2. Пераменныя для кіравання пагінацыяй альбомаў у мадальным акне\n// ===============================================\nlet allAlbums = [];\nlet currentAlbumPage = 1;\nconst albumsPerPage = 8; // Па 8 альбомаў на старонку ў мадальным акне\n\n// ===============================================\n// 3. Функцыі апрацоўшчыкаў закрыцця мадальнага акна\n// ===============================================\nfunction closeArtistModal() {\n  if (artistModal) {\n    artistModal.classList.remove('open');\n  }\n  if (document.body) {\n    document.body.classList.remove('modal-open');\n  }\n  // Ачыстка кантэнту пры закрыцці, каб не было старых дадзеных\n  if (modalTitle) modalTitle.textContent = 'Назва выканаўцы';\n  if (heroArtistImg) {\n    heroArtistImg.src = '';\n    heroArtistImg.alt = '';\n  }\n  if (artistInfoList) artistInfoList.innerHTML = '';\n  if (artistBioParagraph) artistBioParagraph.innerHTML = '';\n  if (genresList) genresList.innerHTML = '';\n  if (artistAlbumsListContainer) artistAlbumsListContainer.innerHTML = '';\n\n  // Схаваць лоадер\n  if (modalLoader) modalLoader.style.display = 'none';\n\n  // Выдаліць кнопкі пагінацыі, калі яны былі створаны\n  const existingPaginationControls = artistModal.querySelector(\n    '.pagination-controls'\n  );\n  if (existingPaginationControls) {\n    existingPaginationControls.remove();\n  }\n}\n\nfunction outsideClickHandler(e) {\n  if (e.target === artistModal) {\n    closeArtistModal();\n  }\n}\n\nfunction escapeKeyHandler(e) {\n  if (e.key === 'Escape') {\n    closeArtistModal();\n  }\n}\n\n// ===============================================\n// 4. Функцыя для адлюстравання альбомаў (з пагінацыяй)\n// ===============================================\nfunction renderAlbums(page) {\n  if (!artistAlbumsListContainer) return;\n\n  const startIndex = (page - 1) * albumsPerPage;\n  const endIndex = startIndex + albumsPerPage;\n  const albumsToDisplay = allAlbums.slice(startIndex, endIndex);\n\n  artistAlbumsListContainer.innerHTML = ''; // Ачыстка спісу альбомаў перад запаўненнем\n\n  if (albumsToDisplay.length === 0) {\n    artistAlbumsListContainer.innerHTML = `<li class=\"artist-albums-item\"><p>Інфармацыя пра альбомы адсутнічае.</p></li>`;\n    return;\n  }\n\n  albumsToDisplay.forEach(album => {\n    let albumItemHtml = `<li class=\"artist-albums-item\">\n                                <h3>${album.strAlbum || 'Назва альбому'} (${\n      album.intYearReleased || 'Год'\n    })</h3>\n                                <ul class=\"album-track-list\">`;\n\n    // Загаловак табліцы трэкаў\n    albumItemHtml += `<li class=\"album-track-item track-header\">\n                                <ul class=\"track-info-list\">\n                                    <li class=\"track-info-item\">Трэк</li>\n                                    <li class=\"track-info-item\">Час</li>\n                                    <li class=\"track-info-item\">Спасылка</li>\n                                </ul>\n                            </li>`;\n\n    if (album.tracks && album.tracks.length > 0) {\n      album.tracks.forEach((track, index) => {\n        const rowClass = index % 2 === 0 ? 'even-row' : 'odd-row';\n        albumItemHtml += `<li class=\"album-track-item ${rowClass}\">\n                                        <ul class=\"track-info-list\">\n                                            <li class=\"track-info-item\">${\n                                              track.strTrack ||\n                                              'Назва кампазіцыі'\n                                            }</li>\n                                            <li class=\"track-info-item\">${\n                                              track.intDuration\n                                                ? formatDuration(\n                                                    track.intDuration\n                                                  )\n                                                : '-'\n                                            }</li>\n                                            <li class=\"track-info-item\">`;\n        // Праверка на карэктнасць URL: пачынаецца з http і не роўна \"null\"\n        if (\n          track.movie && // Выкарыстоўваем 'movie' для YouTube спасылак\n          track.movie !== 'null' &&\n          (track.movie.startsWith('http://') ||\n            track.movie.startsWith('https://'))\n        ) {\n          albumItemHtml += `<button class=\"yt-button\" data-url=\"${track.movie}\">YouTube</button>`;\n        } else {\n          albumItemHtml += `-`;\n        }\n        albumItemHtml += `</li>\n                                        </ul>\n                                    </li>`;\n      });\n    } else {\n      albumItemHtml += `<li class=\"album-track-item\"><p>Няма кампазіцый для гэтага альбому.</p></li>`;\n    }\n    albumItemHtml += `</ul></li>`;\n    artistAlbumsListContainer.insertAdjacentHTML('beforeend', albumItemHtml);\n  });\n\n  // ===============================================\n  // Стварэнне кнопак пагінацыі (за межамі ul.artist-albums-list)\n  // ===============================================\n  const totalPages = Math.ceil(allAlbums.length / albumsPerPage);\n\n  const existingPaginationControls = artistModal.querySelector(\n    '.pagination-controls'\n  );\n  if (existingPaginationControls) {\n    existingPaginationControls.remove();\n  }\n\n  if (totalPages > 1) {\n    const paginationControls = document.createElement('div');\n    paginationControls.className = 'pagination-controls';\n\n    const prevButton = document.createElement('button');\n    prevButton.textContent = 'Папярэдняя';\n    prevButton.disabled = page === 1;\n    prevButton.addEventListener('click', () => {\n      currentAlbumPage--;\n      renderAlbums(currentAlbumPage);\n    });\n\n    const nextButton = document.createElement('button');\n    nextButton.textContent = 'Наступная';\n    nextButton.disabled = page === totalPages;\n    nextButton.addEventListener('click', () => {\n      currentAlbumPage++;\n      renderAlbums(currentAlbumPage);\n    });\n\n    const pageInfo = document.createElement('span');\n    pageInfo.textContent = ` ${page} / ${totalPages} `;\n\n    paginationControls.appendChild(prevButton);\n    paginationControls.appendChild(pageInfo);\n    paginationControls.appendChild(nextButton);\n\n    if (artistAlbumsListContainer.parentElement) {\n      artistAlbumsListContainer.parentElement.appendChild(paginationControls);\n    } else {\n      artistModal.appendChild(paginationControls);\n    }\n  }\n\n  // ===============================================\n  // Прывязваем падзеі да кнопак YouTube пасля абнаўлення DOM\n  // ===============================================\n  const ytButtons = artistModal.querySelectorAll('.yt-button');\n  ytButtons.forEach(btn => {\n    btn.addEventListener('click', function (e) {\n      const url = e.target.dataset.url;\n      if (url) {\n        window.open(url, '_blank');\n      }\n    });\n  });\n}\n\n// ===============================================\n// 5. Функцыя для фарматавання часу (мілісекунды ў хвіліны:секунды)\n// ===============================================\nfunction formatDuration(ms) {\n  if (typeof ms !== 'number' || isNaN(ms)) {\n    return 'N/A';\n  }\n  const totalSeconds = Math.floor(ms / 1000);\n  const minutes = Math.floor(totalSeconds / 60);\n  const seconds = totalSeconds % 60;\n  return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n}\n\n// ===============================================\n// 6. Галоўная функцыя для адкрыцця мадальнага акна артыста\n// ===============================================\nexport async function openArtistModal(artistId) {\n  // <<< ВОСЬ ТУТ ДАДАДЗЕНЫ 'export'\n  // Кароткая праверка на існаванне асноўных элементаў модала\n  if (\n    !artistModal ||\n    !modalLoader ||\n    !modalTitle ||\n    !heroArtistImg ||\n    !artistInfoList ||\n    !artistBioParagraph ||\n    !genresList ||\n    !artistAlbumsListContainer\n  ) {\n    console.error(\n      'Адзін або некалькі элементаў мадальнага акна не знойдзены ў DOM. Праверце свае HTML ID і класы.'\n    );\n    return;\n  }\n\n  // Паказваем мадальнае акно і загрузнік\n  document.body.classList.add('modal-open');\n  artistModal.classList.add('open');\n  modalLoader.style.display = 'block';\n\n  // Ачыстка старога кантэнту перад загрузкай\n  modalTitle.textContent = 'Загрузка...';\n  heroArtistImg.src = '';\n  heroArtistImg.alt = '';\n  artistInfoList.innerHTML = '';\n  artistBioParagraph.innerHTML = '';\n  genresList.innerHTML = '';\n  artistAlbumsListContainer.innerHTML = '';\n\n  // Скід пагінацыі пры адкрыцці новага артыста\n  currentAlbumPage = 1;\n  allAlbums = [];\n\n  // Выдаляем кнопкі пагінацыі, калі яны засталіся ад папярэдняга адкрыцця\n  const existingPaginationControls = artistModal.querySelector(\n    '.pagination-controls'\n  );\n  if (existingPaginationControls) {\n    existingPaginationControls.remove();\n  }\n\n  try {\n    // Выкарыстоўваем функцыю fetchArtistDetailsWithTracks,\n    // бо яна вяртае tracksList непасрэдна з інфармацыяй пра артыста.\n    // Калі вы хочаце выкарыстоўваць albumsList, заменіце на fetchArtistDetailsWithAlbums.\n    const artistData = await fetchArtistDetailsWithTracks(artistId);\n\n    modalLoader.style.display = 'none'; // Хаваем лоадер пасля атрымання дадзеных\n\n    // Запаўняем асноўную інфармацыю пра артыста\n    modalTitle.textContent = artistData.strArtist || 'Невядомы выканаўца';\n    heroArtistImg.src =\n      artistData.strArtistThumb ||\n      'https://via.placeholder.com/250x250.png?text=No+Image'; // Заглушка\n    heroArtistImg.alt = artistData.strArtist || 'Фота выканаўцы';\n\n    // Інфармацыя пра артыста (годы, пол, удзельнікі, краіна)\n    artistInfoList.innerHTML = `\n                <li class=\"artist-info-item\">\n                    <h3>Гады актыўнасці</h3>\n                    <p class=\"artist-info\">${\n                      artistData.intFormedYear || 'інфармацыя адсутнічае'\n                    }</p>\n                </li>\n                <li class=\"artist-info-item\">\n                    <h3>Пол</h3>\n                    <p class=\"artist-info\">${\n                      artistData.strGender || 'інфармацыя адсутнічае'\n                    }</p>\n                </li>\n                <li class=\"artist-info-item\">\n                    <h3>Удзельнікі</h3>\n                    <p class=\"artist-info\">${\n                      artistData.intMembers || 'інфармацыя адсутнічае'\n                    }</p>\n                </li>\n                <li class=\"artist-info-item\">\n                    <h3>Краіна</h3>\n                    <p class=\"artist-info\">${\n                      artistData.strCountry || 'інфармацыя адсутнічае'\n                    }</p>\n                </li>\n            `;\n\n    // Біяграфія\n    artistBioParagraph.innerHTML =\n      artistData.strBiographyEN || 'Біяграфія адсутнічае.';\n\n    // Жанры (з artistData)\n    genresList.innerHTML = ''; // Ачыстка перад даданнем\n    if (artistData.genres && artistData.genres.length > 0) {\n      artistData.genres.forEach(genre => {\n        const li = document.createElement('li');\n        li.className = 'ganres-item';\n        li.textContent = genre;\n        genresList.appendChild(li);\n      });\n    } else {\n      const li = document.createElement('li');\n      li.className = 'ganres-item';\n      li.textContent = 'Жанры адсутнічаюць';\n      genresList.appendChild(li);\n    }\n\n    // ===============================================\n    // ЛОГІКА ДЛЯ АЛЬБОМАЎ З ПЕРАЎТВАРЭННЕМ ТРЭКАЎ\n    // Выкарыстоўваем artistData.tracksList, бо гэты эндпоінт яго вяртае.\n    // = Калі б вы выкарыстоўвалі fetchArtistDetailsWithAlbums, тут было б artistData.albumsList >\n    // ===============================================\n    if (artistData.tracksList && artistData.tracksList.length > 0) {\n      // Групоўка трэкаў па альбомах\n      const albumsMap = new Map();\n      artistData.tracksList.forEach(track => {\n        const albumName = track.strAlbum || 'Невядомы альбом';\n        const albumId = track.idAlbum || albumName; // Выкарыстоўваем ID альбома або назву для унікальнасці\n        if (!albumsMap.has(albumId)) {\n          albumsMap.set(albumId, {\n            strAlbum: albumName,\n            intYearReleased: track.intYearReleased || 'Невядома', // Год можа быць не ва ўсіх трэках\n            idAlbum: albumId,\n            tracks: [],\n          });\n        }\n        albumsMap.get(albumId).tracks.push(track);\n      });\n\n      // Пераўтвараем Map у масіў і сартуем па годзе выпуску (змяншальна)\n      allAlbums = Array.from(albumsMap.values()).sort((a, b) => {\n        // Парсім год, калі ён ёсць, інакш лічым 0\n        const yearA = parseInt(a.intYearReleased) || 0;\n        const yearB = parseInt(b.intYearReleased) || 0;\n        return yearB - yearA; // Сартаванне ад новых да старых\n      });\n\n      renderAlbums(currentAlbumPage); // Адлюстроўваем першую старонку\n    } else {\n      artistAlbumsListContainer.innerHTML = `<li class=\"artist-albums-item\"><p>Інфармацыя пра альбомы і трэкі адсутнічае.</p></li>`;\n    }\n  } catch (error) {\n    modalLoader.style.display = 'none'; // Хаваем лоадер нават пры памылцы\n    if (artistModal) {\n      modalTitle.textContent = 'Памылка загрузкі дадзеных!';\n      let errorMessage =\n        'На жаль, не ўдалося загрузіць дадзеныя пра выканаўцу. ';\n      if (error.response) {\n        // Апрацоўка памылак axios\n        errorMessage += `Статус: ${error.response.status}. `;\n        if (error.response.status === 404) {\n          errorMessage +=\n            'Рэсурс не знойдзены па паказаным URL. Магчыма, няверны ID або API-шлях. Паспрабуйце іншы ID ці праверце дакументацыю API.';\n        } else if (error.response.data && error.response.data.message) {\n          errorMessage += `Паведамленне: ${error.response.data.message}`;\n        }\n      } else if (error.request) {\n        errorMessage +=\n          'Не ўдалося атрымаць адказ ад сервера. Магчыма, праблема з сеткай.';\n      } else {\n        errorMessage += `Паведамленне: ${error.message}`;\n      }\n\n      if (artistInfoList)\n        artistInfoList.innerHTML = `<li class=\"artist-info-item\"><p class=\"error\">${errorMessage}</p></li>`;\n      if (artistBioParagraph) artistBioParagraph.innerHTML = '';\n      if (genresList) genresList.innerHTML = '';\n      if (artistAlbumsListContainer) artistAlbumsListContainer.innerHTML = '';\n    }\n    console.error('Памылка атрымання дадзеных:', error);\n  }\n}\n\n// ===============================================\n// 7. Ініцыялізацыя апрацоўшчыкаў падзей для закрыцця мадальнага акна\n// ===============================================\ndocument.addEventListener('DOMContentLoaded', () => {\n  if (closeModalButton) {\n    closeModalButton.addEventListener('click', closeArtistModal);\n  }\n  if (artistModal) {\n    artistModal.addEventListener('click', outsideClickHandler);\n  }\n  document.addEventListener('keydown', escapeKeyHandler);\n});\n","// js/artists.js\nimport { fetchArtists } from './apiService.js'; // Імпартуем функцыю для загрузкі артыстаў\nimport { openArtistModal } from './modal-artists.js'; // Імпартуем функцыю для адкрыцця мадальнага акна\n\n// ===============================================\n// 1. Кэшаванне DOM-элементаў\n// ===============================================\nconst artistsContainer = document.getElementById('artists-cards-container'); // Бацькоўскі канэйнер для спісу артыстаў\nconst loadMoreBtn = document.querySelector('.load-more-btn'); // Кнопка \"Load More\"\n\n// Пераменная для захавання спасылкі на створаны UL-элемент спісу артыстаў\nlet artistsListElement = null;\n\n// ===============================================\n// 2. Пераменныя для кіравання пагінацыяй\n// ===============================================\nlet currentPage = 1; // Бягучая старонка, пачынаем з першай\nconst artistsPerPage = 8; // Колькасць артыстаў, якія загружаюцца за адзін раз\n\n// ===============================================\n// 3. Функцыя для генерацыі HTML-разметкі адной карткі артыста\n// ===============================================\n/**\n * Генеруе HTML-разметку для адной карткі артыста.\n * @param {Object} artist - Аб'ект артыста з дадзенымі.\n * @returns {string} - HTML-радок для карткі артыста.\n */\nfunction createArtistCardMarkup(artist) {\n  // Генеруем разметку для жанраў як асобных элементаў спісу\n  const genresMarkup = Array.isArray(artist.genres)\n    ? artist.genres\n        .map(genre => `<li class=\"artist-genre-item\">${genre}</li>`) // Кожны жанр - асобны li\n        .join('')\n    : '<li class=\"artist-genre-item\">Невядома</li>'; // Калі жанраў няма\n\n  // Абрэзка біяграфіі да першых двух сказаў\n  const biographyPreview = artist.strBiographyEN\n    ? artist.strBiographyEN.split('. ').slice(0, 2).join('. ') + '.' // Дадаем кропку ў канцы\n    : 'Кароткі апісанне адсутнічае.'; // Запасны тэкст\n\n  return `\n    <li class=\"artist-item\" data-artist-id=\"${artist._id}\">\n      <img src=\"${\n        artist.strArtistThumb ||\n        'https://via.placeholder.com/200x200?text=No+Image'\n      }\"\n           alt=\"${artist.strArtist || 'Фота выканаўцы'}\"\n           class=\"artist-img\">\n      <ul class=\"artist-genres-list\">\n        ${genresMarkup}\n      </ul>\n      <h3 class=\"artist-name\">${artist.strArtist || 'Невядомы выканаўца'}</h3>\n      <p class=\"artist-description\">${biographyPreview}</p>\n      <button type=\"button\" class=\"learn-more-btn button\">Детальніше</button>\n    </li>\n  `;\n}\n\n// ===============================================\n// 4. Функцыя для адлюстравання спісу артыстаў на старонцы\n// ===============================================\n/**\n * Адлюстроўвае масіў артыстаў у спісе, дадаючы іх у DOM.\n * @param {Array} artists - Масіў аб'ектаў артыстаў.\n * @param {boolean} clearPrevious - Калі true, ачышчае спіс перад даданнем новых артыстаў.\n */\nfunction renderArtists(artists, clearPrevious = false) {\n  if (!artistsContainer) {\n    console.error('Элемент #artists-cards-container не знойдзены ў DOM.');\n    return;\n  }\n\n  // Ствараем UL-элемент, калі яго яшчэ няма\n  if (!artistsListElement) {\n    artistsListElement = document.createElement('ul');\n    artistsListElement.classList.add('artists-list'); // Дадаем клас 'artists-list'\n    artistsContainer.appendChild(artistsListElement);\n  }\n\n  if (clearPrevious) {\n    artistsListElement.innerHTML = ''; // Ачышчаем спіс, калі гэта першая загрузка або новы пошук\n  }\n\n  // Генеруем HTML для ўсіх артыстаў і ўстаўляем у DOM\n  const markup = artists.map(createArtistCardMarkup).join('');\n  artistsListElement.insertAdjacentHTML('beforeend', markup);\n\n  // ===============================================\n  // 5. Прывязваем апрацоўшчыкі падзей для кнопак \"Детальніше\"\n  // ===============================================\n  // Важна: шукаем кнопкі толькі ўнутры artistsListElement, каб апрацоўваць толькі новыя элементы\n  artistsListElement.querySelectorAll('.learn-more-btn').forEach(button => {\n    button.addEventListener('click', event => {\n      const artistItem = event.target.closest('.artist-item');\n      if (artistItem) {\n        const artistId = artistItem.dataset.artistId; // Атрымліваем ID артыста з data-атрыбута\n        if (artistId) {\n          // Выклікаем функцыю openArtistModal з modal-artists.js\n          openArtistModal(artistId);\n        } else {\n          console.warn('Кнопка \"Детальніше\" не мае data-artist-id.');\n        }\n      }\n    });\n  });\n}\n\n// ===============================================\n// 6. Функцыя для загрузкі артыстаў з API\n// ===============================================\n/**\n * Загружае артыстаў з API з улікам бягучай старонкі і адлюстроўвае іх.\n * Кіруе станам кнопкі \"Load More\".\n * @param {boolean} newSearch - Калі true, скідае нумар старонкі на 1 і ачышчае спіс.\n */\nasync function loadArtists(newSearch = false) {\n  if (newSearch) {\n    currentPage = 1; // Скідаем старонку, калі гэта новы пошук або першая загрузка\n    // Калі гэта новая загрузка, і элемент спісу ўжо існуе, ачысцім яго перад пачаткам\n    if (artistsListElement) {\n      artistsListElement.innerHTML = '';\n    }\n  }\n\n  try {\n    // Выклікаем функцыю fetchArtists з apiService.js\n    const data = await fetchArtists(artistsPerPage, currentPage);\n    const artists = data.artists || [];\n    const totalArtists = data.totalArtists || 0;\n\n    renderArtists(artists, newSearch); // Адлюстроўваем артыстаў\n\n    // ===============================================\n    // 7. Логіка для паказу/хавання кнопкі \"Load More\"\n    // ===============================================\n    if (loadMoreBtn) {\n      // Праверка на існаванне кнопкі\n      if (currentPage * artistsPerPage >= totalArtists) {\n        loadMoreBtn.classList.add('is-hidden'); // Хаваем, калі ўсе артысты загружаны\n      } else {\n        loadMoreBtn.classList.remove('is-hidden'); // Паказваем, калі ёсць яшчэ артысты\n      }\n    }\n  } catch (error) {\n    console.error('Памылка пры загрузцы артыстаў:', error);\n    // Можна дадаць візуальнае паведамленне карыстальніку пра памылку\n    if (loadMoreBtn) {\n      loadMoreBtn.classList.add('is-hidden'); // Хаваем кнопку пры памылцы загрузкі\n    }\n    // Калі спіс пусты, пакажам паведамленне\n    if (artistsListElement && artistsListElement.innerHTML === '') {\n      artistsListElement.innerHTML = `<li class=\"artist-item\"><p>Не ўдалося загрузіць выканаўцаў. Паспрабуйце пазней.</p></li>`;\n    }\n  }\n}\n\n// ===============================================\n// 8. Прывязваем апрацоўшчык падзей да кнопкі \"Load More\"\n// ===============================================\nif (loadMoreBtn) {\n  loadMoreBtn.addEventListener('click', () => {\n    currentPage += 1; // Павялічваем нумар старонкі\n    loadArtists(false); // Загружаем наступную порцыю без ачысткі папярэдніх\n  });\n}\n\n// ===============================================\n// 9. Запускаем загрузку артыстаў пры загрузцы DOM\n// ===============================================\ndocument.addEventListener('DOMContentLoaded', () => {\n  loadArtists(true); // Першая загрузка: ачышчаем спіс і паказваем першых 8 артыстаў\n});\n"],"names":["API_BASE_URL","fetchArtists","limit","page","axios","error","fetchArtistDetailsWithTracks","artistId","heroColumnOne","heroColumnTwo","displayHeroArtists","artists","columnOneArtists","columnTwoArtists","populateColumn","columnElement","artistData","imgElements","artist","index","exploreBtn","artistsSection","event","artistModal","closeModalButton","modalLoader","modalTitle","heroArtistImg","artistInfoList","artistBioParagraph","genresList","artistAlbumsListContainer","allAlbums","currentAlbumPage","albumsPerPage","closeArtistModal","existingPaginationControls","outsideClickHandler","escapeKeyHandler","renderAlbums","startIndex","endIndex","albumsToDisplay","album","albumItemHtml","track","rowClass","formatDuration","totalPages","paginationControls","prevButton","nextButton","pageInfo","btn","e","url","ms","totalSeconds","minutes","seconds","openArtistModal","genre","li","albumsMap","albumName","albumId","a","b","yearA","errorMessage","artistsContainer","loadMoreBtn","artistsListElement","currentPage","artistsPerPage","createArtistCardMarkup","genresMarkup","biographyPreview","renderArtists","clearPrevious","markup","button","artistItem","loadArtists","newSearch","data","totalArtists"],"mappings":"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"}