{"version":3,"file":"index.js","sources":["../src/task-1.ts","../src/task-2.ts","../src/task-3.ts","../src/task-4.ts","../src/task-5.ts","../src/task-6.ts","../src/task-7.ts","../src/task-8.ts"],"sourcesContent":["//  Задача 1. Типізація скалярних значень (файл task-1.ts)\n// У цьому фрагменті коду оголошені три змінні з різними типами значень: текст, число і булеве значення.\n\n// const name = \"Alice\";\n// const age = 30;\n// const isOnline = true;\n\n// console.log(`Name: ${name}`);\n// console.log(`Age: ${age}`);\n// console.log(`Online: ${isOnline}`);\n\n// Завдання:\n\n// Додай до кожної змінної явну типізацію.\n// Переконайся, що TypeScript правильно визначає тип, і не видає помилку.\n// Залиш назви змінних і їх значення без змін.\nexport {};\nconst name: string = 'Alice';\nconst age: number = 30;\nconst isOnline: boolean = true;\n\nconsole.log(`Name: ${name}`);\nconsole.log(`Age: ${age}`);\nconsole.log(`IsOnline: ${isOnline}`);\n","// Задача 2. Інтерфейси (файл task-2.ts)\n\n// У цьому фрагменті коду є об'єкт product, який описує товар.\n\n// const product = {\n//   id: 1,\n//   title: \"Tablet\",\n//   description: \"Compact and fast\",\n// };\n\n// console.log(`Product: ${JSON.stringify(product)}`);\n\n// Завдання:\n\n// Створи інтерфейс Product, який описує структуру цього об’єкта.\n// Зроби поле id тільки для читання – воно не повинно змінюватись після створення об’єкта.\n// Зроби поле description необов’язковим – не всі товари можуть його мати.\n// Типізуй змінну product за допомогою створеного інтерфейсу.\n// Залиш властивості обʼєкта product і їх значення без змін.\nexport {};\ninterface Product {\n  readonly id: number;\n  title: string;\n  description?: string;\n}\n\nconst product: Product = {\n  id: 1,\n  title: 'Tablet',\n  description: 'Compact and fast',\n};\n\nconsole.log(`Product: ${JSON.stringify(product)}`);\n","// Задача 3. Типізація масивів (файл task-3.ts)\n\n// У цьому коді є три масиви з різними типами даних: рядки, числа та об’єкти.\n\n// const usernames = [\"alice\", \"bob\", \"charlie\"];\n\n// const ratings = [4.5, 3.8, 5];\n\n// const products = [\n//   { id: 1, title: \"Phone\" },\n//   { id: 2, title: \"Laptop\" },\n// ];\n\n// console.log(`Usernames: ${JSON.stringify(usernames)}`);\n// console.log(`Ratings: ${JSON.stringify(ratings)}`);\n// console.log(`Products: ${JSON.stringify(products)}`);\n\n// Завдання:\n\n// Додай тип для масиву рядків usernames, використовуючи синтаксис [].\n// Додай тип для масиву чисел ratings, використовуючи синтаксис [].\n// Для масиву products:\n// Створи окремий інтерфейс Product для елементів масиву.\n// Типізуй сам масив за допомогою цього інтерфейсу.\n// 4. Залиш елементи масиву products без змін.\nexport {};\nconst usernames: string[] = ['alice', 'bob', 'charlie'];\nconst ratings: number[] = [4.5, 3.8, 5];\ninterface Product {\n  id: number;\n  title: string;\n}\nconst products: Product[] = [\n  { id: 1, title: 'Phone' },\n  { id: 2, title: 'Laptop' },\n];\nconsole.log(`Usernames: ${JSON.stringify(usernames)}`);\nconsole.log(`Ratings: ${JSON.stringify(ratings)}`);\nconsole.log(`Products: ${JSON.stringify(products)}`);\n","// Задача 4. Функції (файл task-4.ts)\n\n// Функція printUserInfo виводить інформацію про користувача, включаючи ім’я, вік і (опціонально) email.\n\n// function printUserInfo(name, age, email) {\n//   console.log(\"Name:\", name);\n//   console.log(\"Age:\", age);\n//   if (email) {\n//     console.log(\"Email:\", email);\n//   }\n// }\n\n// printUserInfo(\"Alice\", 30);\n// printUserInfo(\"Bob\", 25, \"bob@mail.com\");\n\n// Завдання:\n\n// Додай явну типізацію до параметрів функції: name, age та email.\n// Зроби параметр email опціональним – щоб функція могла працювати як з ним, так і без нього.\n// Типізуй повернення функції, зауваж що вона нічого явно не повертає.\n// Залиш реалізацію функції без змін.\nexport {};\nfunction printUserInfo(name: string, age: number, email?: string): void {\n  console.log('Name:', name);\n  console.log('Age:', age);\n  if (email) {\n    console.log('Email:', email);\n  }\n}\nprintUserInfo('Alice', 30);\nprintUserInfo('Bob', 25, 'bob@mail.com');\n","// Задача 5. Union Type (файл task-5.ts)\n\n// Функція logStatus приймає рядок status і виводить відповідне повідомлення.\n\n// function logStatus(status) {\n//   if (status === \"loading\") {\n//     console.log(\"Loading...\");\n//   } else if (status === \"success\") {\n//     console.log(\"Success!\");\n//   } else if (status === \"error\") {\n//     console.log(\"Something went wrong\");\n//   }\n// }\n\n// logStatus(\"loading\");\n\n// Завдання:\n\n// Типізуй параметр status так, щоб дозволити тільки три конкретні рядкові значення: \"loading\", \"success\", \"error\"\n// Переконайся, що TypeScript не дозволяє передати будь-яке інше значення.\n// Типізуй повернення функції, зауваж що вона нічого явно не повертає.\n// Залиш реалізацію функції без змін.\nexport {};\nfunction logStatus(status: 'loading' | 'success' | 'error'): void {\n  if (status === 'loading') {\n    console.log('Loading...');\n  } else if (status === 'success') {\n    console.log('Success!');\n  } else if (status === 'error') {\n    console.log('Something went wrong');\n  }\n}\nlogStatus('loading');\nlogStatus('success');\nlogStatus('error');\n","// Задача 6. Узагальнені типи (файл task-6.ts)\n\n// Функція getFirstElement приймає масив і повертає його перший елемент.\n\n// function getFirstElement(arr) {\n//   return arr[0];\n// }\n\n// getFirstElement([1, 2, 3]);\n// getFirstElement([\"a\", \"b\", \"c\"]);\n// getFirstElement([true, false, true]);\n\n// Завдання:\n\n// Зроби функцію узагальненою, використовуючи тип T, щоб вона працювала з масивами будь-якого типу.\n// Додай явну типізацію дженериків у виклики функцій.\n// Переконайся, що тип елемента, який повертається, точно відповідає типу елементів у масиві.\n// Перевір, що TypeScript не дозволяє передати масив змішаних типів без відповідного типу.\nexport {};\nfunction getFirstElement<T>(arr: T[]): T | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  return arr[0];\n}\nconst numResult = getFirstElement<number>([1, 2, 3]);\nconsole.log(`First number: ${numResult}, Type: ${typeof numResult}`);\nconst stringResult = getFirstElement<string>(['a', 'b', 'c']);\nconsole.log(`First string: ${stringResult}, Type: ${typeof stringResult}`);\nconst booleanResult = getFirstElement<boolean>([true, false, true]);\nconsole.log(`First boolean: ${booleanResult}, Type: ${typeof booleanResult}`);\nconst mixedTypeArray = [1, 'two', true];\nconst mixedResult = getFirstElement<number | string | boolean>(mixedTypeArray);\nconsole.log(`First mixed: ${mixedResult}, Type: ${typeof mixedResult}`);\nconst emptyResult = getFirstElement<string>([]);\nconsole.log(\n  `First el of empty arr: ${emptyResult}, Type: ${typeof emptyResult}`\n);\n","// Задача 7. Типізація Promise (файл task-7.ts)\n\n// Функція getMessage повертає проміс, який через затримку повертає рядок.\n\n// function getMessage() {\n//   return new Promise((resolve) => {\n//     setTimeout(() => {\n//       resolve(\"Hello from TS\");\n//     }, 1000);\n//   });\n// }\n\n// getMessage().then(result => console.log(result));\n// Завдання:\n\n// Додай до функції явну типізацію, яка вказує, що вона повертає проміс.\n// Переконайся, що значення, з яким виконається проміс, – це рядок (string).\nexport {};\nfunction getMessage(): Promise<string> {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve('Hello from TS');\n    }, 1000);\n  });\n}\ngetMessage().then(result => {\n  console.log(result);\n  console.log(`Type of result: ${typeof result}`);\n});\n","// Завдання 8. HTTP-запити (файл task-8.ts)\n\n// Функція fetchPosts робить GET-запит до API та повертає список постів.\n\n// import axios from \"axios\";\n\n// async function fetchPosts() {\n//   const response = await axios.get(\n//     '<https://jsonplaceholder.typicode.com/posts>'\n//   );\n//   return response.data;\n// }\n\n// fetchPosts().then((posts) => {\n//   console.log(posts[0].title);\n// });\n\n// Завдання:\n\n// Інсталюй бібліотеку axios командою npm i axios\n// Створи інтерфейс Post, який описує об'єкт поста з такими полями:\n// id: число\n// title: рядок\n// body: рядок\n// 3. Типізуй axios.get, щоб вказати, що API повертає масив постів.\nexport {};\nimport axios from 'axios';\ninterface Post {\n  id: number;\n  title: string;\n  body: string;\n}\nasync function fetchPosts(): Promise<Post[]> {\n  const response = await axios.get<Post[]>(\n    'https://jsonplaceholder.typicode.com/posts'\n  );\n  return response.data;\n}\nfetchPosts()\n  .then(posts => {\n    if (posts.length > 0) {\n      console.log(`First post (title): ${posts[0].title}`);\n      console.log(`First post (body): ${posts[0].title}`);\n      console.log(`First post type:`, posts[0]);\n    } else {\n      console.log('Posts not found');\n    }\n  })\n  .catch(error => {\n    console.error('Error during posts receiving:', error);\n  });\n"],"names":["name","age","isOnline","product","usernames","ratings","products","printUserInfo","email","logStatus","status","getFirstElement","arr","numResult","stringResult","booleanResult","mixedTypeArray","mixedResult","emptyResult","getMessage","resolve","result","fetchPosts","axios","posts","error"],"mappings":"svBAiBA,MAAMA,EAAe,QACfC,EAAc,GACdC,EAAoB,GAE1B,QAAQ,IAAI,SAASF,CAAI,EAAE,EAC3B,QAAQ,IAAI,QAAQC,CAAG,EAAE,EACzB,QAAQ,IAAI,aAAaC,CAAQ,EAAE,ECGnC,MAAMC,EAAmB,CACvB,GAAI,EACJ,MAAO,SACP,YAAa,kBACf,EAEA,QAAQ,IAAI,YAAY,KAAK,UAAUA,CAAO,CAAC,EAAE,ECNjD,MAAMC,EAAsB,CAAC,QAAS,MAAO,SAAS,EAChDC,EAAoB,CAAC,IAAK,IAAK,CAAC,EAKhCC,EAAsB,CAC1B,CAAE,GAAI,EAAG,MAAO,OAAQ,EACxB,CAAE,GAAI,EAAG,MAAO,QAAS,CAC3B,EACA,QAAQ,IAAI,cAAc,KAAK,UAAUF,CAAS,CAAC,EAAE,EACrD,QAAQ,IAAI,YAAY,KAAK,UAAUC,CAAO,CAAC,EAAE,EACjD,QAAQ,IAAI,aAAa,KAAK,UAAUC,CAAQ,CAAC,EAAE,EChBnD,SAASC,EAAcP,EAAcC,EAAaO,EAAsB,CAC9D,QAAA,IAAI,QAASR,CAAI,EACjB,QAAA,IAAI,OAAQC,CAAG,EACnBO,GACM,QAAA,IAAI,SAAUA,CAAK,CAE/B,CACAD,EAAc,QAAS,EAAE,EACzBA,EAAc,MAAO,GAAI,cAAc,ECPvC,SAASE,EAAUC,EAA+C,CAC5DA,IAAW,UACb,QAAQ,IAAI,YAAY,EACfA,IAAW,UACpB,QAAQ,IAAI,UAAU,EACbA,IAAW,SACpB,QAAQ,IAAI,sBAAsB,CAEtC,CACAD,EAAU,SAAS,EACnBA,EAAU,SAAS,EACnBA,EAAU,OAAO,ECfjB,SAASE,EAAmBC,EAAyB,CAC/C,GAAAA,EAAI,SAAW,EAGnB,OAAOA,EAAI,CAAC,CACd,CACA,MAAMC,EAAYF,EAAwB,CAAC,EAAG,EAAG,CAAC,CAAC,EACnD,QAAQ,IAAI,iBAAiBE,CAAS,WAAW,OAAOA,CAAS,EAAE,EACnE,MAAMC,EAAeH,EAAwB,CAAC,IAAK,IAAK,GAAG,CAAC,EAC5D,QAAQ,IAAI,iBAAiBG,CAAY,WAAW,OAAOA,CAAY,EAAE,EACzE,MAAMC,EAAgBJ,EAAyB,CAAC,GAAM,GAAO,EAAI,CAAC,EAClE,QAAQ,IAAI,kBAAkBI,CAAa,WAAW,OAAOA,CAAa,EAAE,EAC5E,MAAMC,EAAiB,CAAC,EAAG,MAAO,EAAI,EAChCC,EAAcN,EAA2CK,CAAc,EAC7E,QAAQ,IAAI,gBAAgBC,CAAW,WAAW,OAAOA,CAAW,EAAE,EACtE,MAAMC,EAAcP,EAAwB,EAAE,EAC9C,QAAQ,IACN,0BAA0BO,CAAW,WAAW,OAAOA,CAAW,EACpE,ECnBA,SAASC,GAA8B,CAC9B,OAAA,IAAI,QAAmBC,GAAA,CAC5B,WAAW,IAAM,CACfA,EAAQ,eAAe,GACtB,GAAI,CAAA,CACR,CACH,CACAD,IAAa,KAAeE,GAAA,CAC1B,QAAQ,IAAIA,CAAM,EAClB,QAAQ,IAAI,mBAAmB,OAAOA,CAAM,EAAE,CAChD,CAAC,ECID,eAAeC,GAA8B,CAI3C,OAHiB,MAAMC,EAAM,IAC3B,4CACF,GACgB,IAClB,CACAD,IACG,KAAcE,GAAA,CACTA,EAAM,OAAS,GACjB,QAAQ,IAAI,uBAAuBA,EAAM,CAAC,EAAE,KAAK,EAAE,EACnD,QAAQ,IAAI,sBAAsBA,EAAM,CAAC,EAAE,KAAK,EAAE,EAClD,QAAQ,IAAI,mBAAoBA,EAAM,CAAC,CAAC,GAExC,QAAQ,IAAI,iBAAiB,CAEjC,CAAC,EACA,MAAeC,GAAA,CACN,QAAA,MAAM,gCAAiCA,CAAK,CACtD,CAAC"}